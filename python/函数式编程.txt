
===================================================================================================================
在Python语言中，函数式编程主要由3个基本函数和1个算子组成：
    · 基本函数：map(), reduce(), filter()
    · 算子(operator): lambda

===================================================================================================================
lambda的定义：
    func1 = lambda : <expression()>
    func2 = lambda x : <expression(x)>
    func3 = lambda x,y : <expression(x,y)>

===================================================================================================================
map()函数：
    map(func, iterable)
        map函数将第二个参数(iterable)中的每一个元素分别传给第一个参数(func)，依次执行函数得到结果，并将结果组成一个新的list对象后返回。
        examples:
            >>> double_func = lambda s : s * 2
            >>> map(double_func, [1,2,3,4,5])
            [2, 4, 6, 8, 10]

    map(func, iterable1, iterable2)
        map还可以支持传入多个可迭代对象，在传入多个可迭代对象时，map()会依次从所有可迭代对象中依次取一个元素，组成一个元组列表，然后将元组列表依次传给func，若可迭代对象的长度不一致，则会用None填补。
        examples:
            >>> plus = lambda x,y : (x or 0) + (y or 0)
            >>> map(plus, [1,2,3], [4,5,6])
            [5, 7, 9]
            >>> map(plus, [1,2,3,4], [4,5,6])
            [5, 7, 9, 4]
            >>> map(plus, [1,2,3], [4,5,6,7])
            [5, 7, 9, 7]

    可迭代对象的数量需要和func的参数个数一致。

===================================================================================================================
reduce()函数：
    reduce(func, iterable[, initializer])
        reduce函数是对可迭代对象(iterable)中的元素从左到右进行累计运算，最终得到一个数值。第三个参数initializer是最初数值。
        examples:
            >>> plus = lambda x, y : x + y
            >>> reduce(plus, [1,2,3,4,5])
            15
            >>> reduce(plus, [1,2,3,4,5], 10)
            25

===================================================================================================================
filter()函数：
    filter(func, iterable)
        filter将第二个参数(iterable)中的每一个元素分别传递给第一个参数(func)，依次执行func函数得到一个bool结果，filter()会判断结果，并只将bool值为true的筛选出来组成一个新的列表返回。
        examples:
            >>> mode2 = lambda x : x % 2
            >>> filter(mode2, [1,2,3,4,5,6,7,8,9,10])
            [1, 3, 5, 7, 9]

===================================================================================================================
用函数式编程，替代条件控制语句(if/elif/else)

# flow control statement
if <cond1>:   func1()
elif <cond2>: func2()
else:         func3()

等价于：

# Equivalent "short circuit" expression
(<cond1> and func1()) or (<cond2> and func2()) or (func3())

===================================================================================================================
用函数式编程，替代循环控制语句

替代for in:
    # statement-based for loop
    for e in lst:  func(e)

    等价于：

    # Equivalent map()-based loop
    map(func, lst)

替代while:
    # statement-based while loop
    while <condition>:
        <pre-suite>
        if <break_condition>:
            break
        else:
            <suite>

    等价于：

    # Equivalent FP-style recursive while loop
    def while_block():
        <pre-suite>
        if <break_condition>:
            return 1
        else:
            <suite>
        return 0
    
    while_FP = lambda: <condition> and (while_block() or while_FP())
    while_FP()

===================================================================================================================

函数式编程实现一个echo例子：

程序执行效果：
    ➜  PythonFP python pyecho.py
    IMP -- 1
    1
    IMP -- 2
    2
    IMP -- abc
    abc
    IMP -- 1 + 1
    1 + 1
    IMP -- quit
    quit
    ➜  PythonFP

过程式编程：
    # imperative version of "echo()"
    def echo_IMP():
        while 1:
            x = raw_input("IMP -- ")
            print x
            if x == 'quit':
                break
    
    echo_IMP()
        
函数式编程：
    def monadic_print(x):
        print x
        return x
    
    # FP version of "echo()"
    echo_FP = lambda: monadic_print(raw_input("FP -- "))=='quit' or echo_FP()
    echo_FP()
