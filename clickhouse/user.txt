
========查看分区
SELECT partition, count() as number_of_parts, formatReadableSize(sum(bytes)) as sum_size FROM system.parts WHERE active AND database = 'default' AND table = 'user' GROUP BY partition ORDER BY partition;

========MergeTree
# 建表
CREATE TABLE user ( Id UInt64, Name String, Age UInt8, Sex UInt8, Coin Int64, RegisterTime DateTime, UpdateTime DateTime ) ENGINE = MergeTree() PARTITION BY toYYYYMMDD(RegisterTime) ORDER BY (Id) SETTINGS index_granularity=8192;

========CollapsingMergeTree
# 建表
CREATE TABLE user ( Id UInt64, Name String, Age UInt8, Sex UInt8, Coin Int64, RegisterTime DateTime, UpdateDate Date, Sign Int8 ) ENGINE = CollapsingMergeTree(Sign) PARTITION BY UpdateDate ORDER BY (Id) SETTINGS index_granularity=8192;

========插入数据
INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10000, '2018-11-01 08:00:00', '2018-12-09 10:00:00', 1), (2, 'kongweigang', 34, 0, 100000, '2018-12-01 06:00:00', '2018-12-03 00:00:00', 1), (3, 'lipeifeng', 26, 0, 100000, '2018-12-03 00:00:00', '2018-12-03 00:00:00', 1);

========修改数据
INSERT INTO user SELECT Id,Name,Age,Sex,Coin,RegisterTime,UpdateTime,-1 FROM user WHERE UpdateTime = (SELECT max(UpdateTime) FROM user WHERE Id=1) LIMIT 1;
INSERT INTO user SELECT Id,Name,Age,Sex,20000,RegisterTime,now(),1 FROM user WHERE UpdateTime = (SELECT max(UpdateTime) FROM user WHERE Id=1) LIMIT 1;


##########
INSERT INTO user SELECT Id,Name,Age,Sex,Coin+1,RegisterTime,now(),1 FROM user WHERE UpdateTime = (SELECT max(UpdateTime) FROM user WHERE Id=1) LIMIT 1;

SELECT * FROM user;
SELECT * FROM user WHERE Id=1 and UpdateTime = (SELECT max(UpdateTime) FROM user WHERE Id=1) LIMIT 1;
SELECT Id FROM user FINAL WHERE Coin < 100000;

sum(Sign*Coin)
avg()

===================
DROP TABLE user;

CREATE TABLE user ( Id UInt64, Name String, Age UInt8, Sex UInt8, Coin Int64, RegisterTime DateTime, UpdateTime DateTime, Sign Int8 ) ENGINE = CollapsingMergeTree(Sign) ORDER BY (Id) SETTINGS index_granularity=8192;

首次插入：
INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10000, '2018-12-09 10:00:00', now(), 1);

更新：
INSERT INTO user (Id, RegisterTime, Sign) VALUES (1, '2018-12-09 10:00:00', -1);
INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10001, '2018-12-09 10:00:00', now(), 1);

更新：
INSERT INTO user (Id, RegisterTime, Sign) VALUES (1, '2018-12-09 10:00:00', -1);
INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10002, '2018-12-09 10:00:00', now(), 1);

1. CK插入性能：保证一次至少合并1000rows 且 保证一秒最多1次插入请求，官方数据若数据一条1Kb，可达到5w-20w插入/s。
2. 数据更新分为离线+实时，离线分全量和增量，但不管形式如何，ucwriter会将数据更新写入aerospike。
3. ucwriter更新aerospike的同时，将数据已更新bitmap标识位置为1（maybe use Pilosa）
4. ckwriter分布式处理bitmap，轮询整个bitmap，对更新标示置为1的数据，从aerospike读取全部字段，并写入CK，但这个行为不是每次真正插入，而是加入本地betch，按照条目1来执行CK插入
5. 多个ckwriter可以按bitmap范围分区，避免数据一致性问题
6. ckwriter每次更新一条数据，将产生两条插入，一条Sign=-1，一条为全量更新数据Sign=1

以上方案使用CollapsingMergeTree，优缺点：
1. 使用CollapsingMergeTree，通过FINAL命令，可以保证数据一致性，查询结果保证正确，但FINAL在大批量数据的情况下的性能需要验证
2. CollapsingMergeTree可通过OPTIMISE TABLE命令来合并数据，解决数据膨胀问题
3. 插入Sign=-1时，如果不带old数据，效率高实现也简单不易出错，缺点是查询时必须FINAL
   插入Sign=-1时，如果带old数据，效率低实现复杂容易出错，好处是查询时可以避免FINAL

=================

DROP TABLE user;

CREATE TABLE user ( Id UInt64, Name String, Age UInt8, Sex UInt8, Coin Int64, RegisterDate Date, UpdateTime DateTime ) ENGINE = ReplacingMergeTree(RegisterDate, Id, 8192, UpdateTime);

INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10000, '2018-12-09', now());
INSERT INTO user VALUES (1, 'zhanghao', 32, 0, 10001, '2018-12-09', now());

SELECT * FROM user FINAL;
OPTIMISE TABLE user;
