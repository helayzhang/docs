Hypertext Transfer Protocol Version 2 (HTTP/2)

摘要
	本文描述了一种优化后的HTTP协议版本，称之为HTTP版本2(HTTP/2)。HTTP/2使网络资源更有效的利用，通过引入头部压缩、允许在同一个连接上并发的双向交换，也降低了延迟。除此之外，还提供了从Server到Client的主动Push机制。
	这套标准并未废弃HTTP/1.1消息语法，而是作为一种它的一种替代品。HTTP现有的语义保持不变。

1. 介绍

	HTTP是一种广泛使用的成功协议。但是如今，HTTP/1.1使用底层传输的方式对应用程序的性能存在负面影响。
	例如，HTTP/1.0在一个TCP连接中仅允许同时进行一个请求；HTTP/1.1增加了管道式请求，但这也仅仅部分解决了请求的并发问题，仍然面对着队头阻塞（head-of-line blocking)问题。因此，HTTP/1.0和HTTP/1.1客户端需要使用多个连接来发送请求来实现并发，从而降低延迟。

	此外，HTTP头部总是重复性和冗长的，引起了完全没必要的网络传输，也导致了初始的TCP拥塞窗口被很快填满。当很多请求都在使用新的TCP连接去发送时，这会导致更多延迟产生。

	HTTP/2通过一种更为优化的方式把HTTP的原有语义映射到底层的连接上，从而旨在解决以上这些问题。具体的说，它允许在同一个连接上的请求与响应消息之间交错顺序，并且它针对HTTP的头部进行更有效率的编码。它也支持了请求的优先级管理，使得更重要的请求可以更快被响应，从而提升性能。

	最终的协议是对网络更为友好的，与HTTP/1.x相比使用了更少的TCP连接。这意味着更少的与其他流和长连接竞争，从而使得整体更好的利用网络容量。

	最后，HTTP/2使用了二进制帧的数据格式，在处理消息时更加高效。

2. HTTP/2 协议总览

	HTTP/2提供了HTTP语义的优化传输。HTTP/2支持HTTP/1.1的所有核心功能，但更有效率。

	HTTP/2里最基础的协议单元是帧。每一种帧类型用于不同的目的。例如，HEADERS帧和DATA帧用于格式化基础的HTTP请求和响应。其他帧类型，例如SETTINGS帧、WINDOW_UPDATE帧、PUSH_PROMISE帧用于支持其他HTTP/2功能。

	多个请求之间可以复用，每个HTTP的请求/响应都和其对应的流关联。流与流之间大多数情况都没有相关性，所以如果一个请求/响应被阻塞或慢速的，他不会影响到其他流上的处理。

	流控和优先级管理使得流的复用可以更有效率。流控保证了接收端只接受自己可以处理的数据。优先级管理保证有限的资源可以优先分配给最重要的流。

	HTTP/2还增加了一种交互模式，使得服务器可以推送响应给客户端。服务端推送使得服务器可以猜测客户端需要的数据，并主动推送给客户端，相当于用一定的网络开销减少了潜在的延迟。服务器先发送一个PUSH_PROMISE帧，然后就可以在一个独立的流中发送推送的响应。

	由于连接中的HTTP头部的字段包含了大量的重复数据，在帧中，这些数据将被压缩。在大部分情况下，这使得请求的大小明显优化，使得一个网络包里可以发送更多的请求。

2.1 文档结构（略）
2.2 约定和数据（略）

3. 开始HTTP/2

	一个HTTP/2连接是建立在TCP连接之上的应用层协议。客户端是TCP链接的发起者。

	HTTP/2使用和HTTP/1.1一样的“http”和“https”URI机制。HTTP/2也相同的默认端口号：“http”默认使用80端口，“https”默认使用443端口。最终，当请求一个资源的URI如：http://example.org/foo或https://example.com/bar的时候，处理时的实现就需要先判断服务器端是否支持HTTP/2。

	对于“http”和“http2”，决定是否支持HTTP/2的依据是不同的。

3.1 HTTP/2版本标识
	“h2”标识基于TLS之上的HTTP/2
	“h2c”标识基于明文TCP之上的HTTP/2

3.2 开始“http”的HTTP/2
	客户端在发起一个"http"请求时，是无需感知HTTP上行通道的下一跳是否支持HTTP/2的。客户端仅仅是发起一个HTTP/1.1的请求，并在Upgrade头部字段中填上"h2c"标识。这样的HTTP/1.1请求必须包含一个HTTP2-Settings头部字段。

	例如：
		GET / HTTP/1.1
		Host: server.example.com
		Connection: Upgrade, HTTP2-Settings
		Upgrade: h2c
		HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>

	如果该请求带有body信息，那么请求必须全部发送完毕后才能发送HTTP/2帧。因此如果请求体很大，那么在它发送完毕之前是会阻塞对连接的使用的。

	如果初始请求与后续的请求非常需要并发，可以使用OPTIONS请求来完成到HTTP/2的升级，这种手段需要多消耗一个RTT延迟。

	服务器如果不支持HTTP/2，则在处理响应时就相当于Upgrade头部字段没有发送。
		HTTP/1.1 200 OK
		Content-Length: 243
		Content-Type: text/html
		...

	服务器必须忽略Upgrade头部字段中的“h2”标识，“h2”标识意味着HTTP/2是基于TLS的，相关的协商过程在3.3节描述。

	支持HTTP/2并接受升级的服务器需要回复一个101(Switching Protocols)状态码的响应。在101响应后的一个空行结束以后，服务器便可以开始发送HTTP/2帧了。这些帧必须包括初始升级的请求所需回复的响应。

	例如：
		HTTP/1.1 101 Switching Protocols
		Connection: Upgrade
		Upgrade: h2c

		[ HTTP/2 connection ...

	服务器发送的第一个HTTP/2帧必须是服务器连接引语(preface)，由SETTINGS帧构成。客户端收到101响应后，也必须发送一个连接引语(preface)，同样也包含一个SETTINGS帧。

	开始用来升级而发送的HTTP/1.1请求会关联到流1上，并使用默认的优先级。流1从客户端到服务器方向是隐性“半关闭”的，因为该请求已经通过HTTP/1.1已经完成了，在开始HTTP/2连接后，流1被用来发送其响应。

3.2.1 HTTP2-Settings头部字段





