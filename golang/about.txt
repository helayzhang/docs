golang的两种变量类型：
    值类型 (array struct)
    引用类型 (slice)

值类型(array/struct)是值传递，比如当把数组或结构体作为实参传给函数的形参时，会复制一个副本，
所以为了提高性能，一般不会把数组直接传递给函数，而是使用切片(引用类型)代替，
而把结构体传给函数时，可以使用指针结构体。

golang里array和slice的区别

    array类型：
        固定长度的数组，使用前必须确定数组长度
        · 值类型，如果你将一个数组赋值给另外一个数组，那么，实际上就是整个数组拷贝了一份
        · 如果golang中的数组作为函数的参数，那么实际传递的参数是一份数组的拷贝，而不是数组的指针
        · array的长度也是Type的一部分，这样就说明[10]int和[20]int是不一样的。

    slice类型：
        · 引用类型，是一个动态的指向数组切片的指针。
        · 是一个不定长的，总是指向底层的数组array的数据结构。

    1. 创建slice
        var al []int     //创建slice
        sl := make([]int,10)  //创建有10个元素的slice
        sl := []int{1,2,3} //创建有初始化元素的slice

    2. 先创建数组,在数组的基础上建立切片slice
        var arr =[10]{1,2,3,4,5,6}  
        sl := arr[2:5] //创建有3个元素的slice

    3. slice一些简便操作
        - `slice`的默认开始位置是0，`ar[:n]`等价于`ar[0:n]`
        - `slice`的第二个序列默认是数组的长度，`ar[n:]`等价于`ar[n:len(ar)]`

    数组和slice的区别
        声明数组时，方括号内写明了数组的长度或者...,声明slice时候，方括号内为空
        作为函数参数时，数组传递的是数组的副本，而slice传递的是指针。
